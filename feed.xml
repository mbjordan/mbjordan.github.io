<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>honyovk</title><atom:link href="http://honyovk.com/feed.xml" rel="self" type="application/rss+xml"></atom:link><link>http://honyovk.com</link><description>scribbles &amp; scrawls</description><pubDate>Mon, 28 Sep 2015 20:00:00 -0400</pubDate><language>en</language><item><title>Promises &amp; Partials</title><link>http://honyovk.com/articles/promises-partials/</link><author></author><pubDate>Mon, 28 Sep 2015 20:00:00 -0400</pubDate><guid isPermaLink="true">http://honyovk.com/articles/promises-partials/</guid><description>&lt;p&gt;As a full-stack JavaScript engineer, I work on a happy mix of both back-end and front-end projects.&lt;/p&gt;
&lt;p&gt;On the front-end side of the stack, I write my fair share of AJAX calls. That is, getting and setting data from back-end services. Among the many different tools to accomplish this, I find using promises &amp;amp; partials to be very useful.&lt;/p&gt;
&lt;p&gt;The functional pattern of getting XHR data with promises and partials allows one to write code that is more immutable and reusable.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;the-partials&quot;&gt;The Partials&lt;/h3&gt;
&lt;p&gt;Let&amp;#39;s say we have a website, and want to display a certain user&amp;#39;s profile from an AJAX call. We could create a simple jQuery function to do this:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mbjordan/1a0febf9375bf5648801.js?file=getUserProfileAndDisplay.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That&amp;#39;s simple enough right? All you&amp;#39;d need to do is call &lt;code&gt;getUserProfileAndDisplay(1234)&lt;/code&gt; and boom!&lt;/p&gt;
&lt;p&gt;But what if you want to create many functions that perform similar tasks, and don&amp;#39;t want &lt;code&gt;n&lt;/code&gt; number of functions that are only slightly different? Partials can help!&lt;/p&gt;
&lt;p&gt;First, let&amp;#39;s start with a basic function that creates &lt;a href=&quot;http://honyovk.com/articles/partial-functions-javascript/&quot;&gt;partials&lt;/a&gt;:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mbjordan/1a0febf9375bf5648801.js?file=partial.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Great! Now we can create a basic &lt;code&gt;ajaxGetter&lt;/code&gt; function:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mbjordan/1a0febf9375bf5648801.js?file=ajaxGetter.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If you notice that the &lt;code&gt;ajaxGetterExecutor&lt;/code&gt; function accepts four arguments, while the &lt;code&gt;ajaxGetter&lt;/code&gt; function only accepts two, you&amp;#39;ll see that we&amp;#39;re creating a partial function inside &lt;code&gt;ajaxGetter&lt;/code&gt; with &lt;code&gt;url, data&lt;/code&gt; already applied. Now, the only arguments left to fulfill are the &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; arguments for the ES6 Promise. &lt;small&gt;(More on Promises in a minute.)&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;We now have a function named &lt;code&gt;ajaxGetter&lt;/code&gt; that we pass a URL and some optional data. Lets put it to action...&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mbjordan/1a0febf9375bf5648801.js?file=ajaxGetter.ex1.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;However, we can take this even further by creating yet another partial, this time of &lt;code&gt;ajaxGetter&lt;/code&gt;:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mbjordan/1a0febf9375bf5648801.js?file=getUserProfile.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now we have a function named &lt;code&gt;getUserProfile&lt;/code&gt; that only does one thing, but we also still have &lt;code&gt;ajaxGetter&lt;/code&gt; for any other needed operations.&lt;/p&gt;
&lt;h3 id=&quot;the-promises&quot;&gt;The Promises&lt;/h3&gt;
&lt;p&gt;Now that we have a dedicated function for getting user data, &lt;em&gt;naturally&lt;/em&gt; we&amp;#39;ll want to do something with that data. Let&amp;#39;s get a user profile and display some basic parts:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mbjordan/1a0febf9375bf5648801.js?file=getUserProfile.ex1.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Boom! That&amp;#39;s easy enough right? But, what if we don&amp;#39;t want a ton of functions that all do the same thing except for which jQuery node they&amp;#39;re inserting into? We can just create a partial of the &lt;code&gt;display&lt;/code&gt; function, and pass it the node we want to update:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mbjordan/1a0febf9375bf5648801.js?file=getUserProfile.ex2.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We know the correct order in which to do this because we&amp;#39;re setting the array in the &lt;code&gt;profileDataToArray&lt;/code&gt; function.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;There&amp;#39;s so much that can be done using Promises &amp;amp; Partials (and even curried functions, but that&amp;#39;s for another time). Please see below for some further reading on the topic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;ES6 Promises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://honyovk.com/articles/partial-functions-javascript/&quot;&gt;Partials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift&quot;&gt;Array.shift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description></item><item><title>Partial Functions in JavaScript</title><link>http://honyovk.com/articles/partial-functions-javascript/</link><author></author><pubDate>Thu, 24 Sep 2015 20:00:00 -0400</pubDate><guid isPermaLink="true">http://honyovk.com/articles/partial-functions-javascript/</guid><description>&lt;p&gt;A partial is a function that returns a new function with one or more of it&amp;#39;s arguments already applied.&lt;/p&gt;
&lt;p&gt;Reusable code is very important. In any application, having smaller, more immutable functions can be very helpful for the same operations that may need to take place many times.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s look at a simple example:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mbjordan/03ad754135035c9e1362.js?file=simple.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The &lt;code&gt;simpleAddition&lt;/code&gt; function accepts two arguments, and adds them together. The partial returned a new function that had already been passed &lt;code&gt;20&lt;/code&gt; as it&amp;#39;s &lt;code&gt;a&lt;/code&gt; argument. This new function will now accept any Number (as it&amp;#39;s &lt;code&gt;b&lt;/code&gt; argument) and add &lt;code&gt;20&lt;/code&gt; to it.&lt;/p&gt;
&lt;p&gt;The above example is basic, but it should give you a good understanding of what is going on.&lt;/p&gt;
&lt;p&gt;Now, let&amp;#39;s look at a basic partial-creation function:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mbjordan/03ad754135035c9e1362.js?file=partial.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This can be used with any number of arguments the original function needs, but they &lt;em&gt;must&lt;/em&gt; be applied in order, and the arity must match by the second call.&lt;/p&gt;
&lt;p&gt;There are a few good libraries out there with solid implementations of partials. Check &amp;#39;em out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ramdajs.com/0.17/docs/#partial&quot;&gt;Ramda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lodash.com/docs#partial&quot;&gt;Lodash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://underscorejs.org/#partial&quot;&gt;Underscore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description></item><item><title>Branching for Github Pages</title><link>http://honyovk.com/articles/branching-github-pages/</link><author></author><pubDate>Thu, 15  Aug 2013 20:00:00 -0400</pubDate><guid isPermaLink="true">http://honyovk.com/articles/branching-github-pages/</guid><description>&lt;p&gt;GitHub repos that also have a Pages branch are getting more commonplace, and maintaining these branches can a pain in the ass.&lt;/p&gt;
&lt;p&gt;This is a simple method of adding multiple branches to one working directory. While I am only discussing adding &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;gh-pages&lt;/code&gt; branches, the idea can be used for any branch.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;intended-directory-structure&quot;&gt;Intended directory structure&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/mbjordan/7f52d9ca652256958b30.js?file=IntendedDirectoryStructure&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;how-to-&quot;&gt;How to:&lt;/h3&gt;
&lt;p&gt;First, create a main directory, then add the &lt;code&gt;master&lt;/code&gt; branch locally.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mbjordan/7f52d9ca652256958b30.js?file=howTo1.sh&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;repo-name&lt;/code&gt; should be the name of your repository.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now we add the &lt;code&gt;gh-pages&lt;/code&gt; branch locally.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mbjordan/7f52d9ca652256958b30.js?file=howTo2.sh&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;em&gt;Please note: running &lt;code&gt;git clone git@github.com:username/repo.git XXX&lt;/code&gt; will create a directory named XXX. Alternatively, you can &lt;code&gt;mkdir&lt;/code&gt; a directory, &lt;code&gt;cd&lt;/code&gt; into it and use a period &lt;code&gt;.&lt;/code&gt; to use the current dir.&lt;/em&gt;&lt;/p&gt;
</description></item></channel></rss>